name: CI

on:
  pull_request:
    branches:
      - main

jobs:
  # -------------------------------------------------------------
  # Event `pull_request`: Returns all changed pull request files.
  # --------------------------------------------------------------
  changed_files:
    # NOTE:
    # - This is limited to pull_request* events and would raise an error for other events.
    # - A maximum of 3000 files can be returned.
    # - For more flexibility and no limitations see "Using local .git directory" above.

    runs-on: macos-latest
    name: Test changed-files
    permissions:
      pull-requests: read

    steps:
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
         files: |
               *.manuscript
        

      - name: List all changed files
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          for file in ${ALL_CHANGED_FILES}; do
            echo "$file was changed"
          done
    
      - name: Run Name Analysis
      - uses: actions/checkout@v45
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          import re

          # Specify the file path
          file_path = ALL_CHANGED_FILES
          # Read the file content
          with open(file_path, 'r') as file:
              file_content = file.read()

          # Extract the "name" field key-value pair using a regular expression
          name  = r"name\s*=>\s*'([^']*)'"
          name = re.search(name, file_content)

          category = r"category\s*=>\s*'([^']*)'"
          category = re.search(category, file_content)

          team = r"team\s*=>\s*'([^']*)'"
          team = re.search(team, file_content)

          if category:
              print(category.group(1).strip())
          else:
              print("No  field found in the file.")


          if name:
              print(name.group(1).strip())
          else:
              print("No  field found in the file.")

          if team:
              print(team.group(1).strip())
          else:
              print("No  field found in the file.")
